---
layout: post
title:      "CLI Gem Portfolio Project blog - Dutchmile"
date:       2020-08-15 16:28:58 +0000
permalink:  cli_gem_portfolio_project_blog_-_dutchmile
---



The first significant project for my Flatiron school program, and consequently the first major undertaking in my career as a software engineer, proved to be a tremendous undertaking that I feel I haven't seen the end of. Due to personal access constraints, prior time commitments and crunches, and other pesky obstacles, this project will hopefully be a hallmark of my early career

To start, allow me to describe the content of my project. This project is an application which utilizes external data sourcing to provide users access to specific information in a friendly, readable format. As an avid gamer, I felt it was natural that I focus my information on something I am both familiar and similarly interested in: videogames. Through this app, users are able to look up information regarding videogames due to be released within the remainder of the year. The app provides not only the currently established release date, but also what gaming systems(platforms) the game is available for a brief description of the game itself. The app also contains developer tools to allow for contributers to play with data and functions to troubleshoot without having to exit the program. 

Probably one of the biggest, if not THE biggest, obstacle for me was figuring out where I would actually code my program. Due to access issues on my computer, I am unable to access the microsoft store, which prevents me from downloading recommended IDE's and sandboxes to my desktop; that meant I couldn't create my program on a private venue, and I had to find another way. After bumbling through various options, I decided to create my app through repl.it. This came with its own issues, since Repl.it has only recently become compatible with Ruby, and currently it is not able to connect with Github, making publishing and submitting the assignment challenging and frustrating. Still, it provided a user-friendly place for me to bang out my program, so in the greater scheme of things it suited my purpose well.

The process for this project was...frustrating. Due to my military commitment and my responsibilities to my newly arrived daughter, I was already beginning a leg and a half behind where I needed to be. With this in mind, the pressure was already on to create something and create it fast. I began my project by deciding where to source my information from, which would determine whether I would use APIs or public webpages. After browsing a list of available API's I felt that scraping websites would provide me with more freedom to create content the way I saw fit. With that decided, I searched for webpages which information I felt could be interesting, relevant, and allow me to separate the app into various sub-functions. I eventually decided to utilize an article from GameRadar.com involving upcoming videogame titles, and with that I began planning my program.

Keeping in mind what information the webpages offered, I began to design my website to reflect these attributes. I first created a file in my program which woud house the user interface. Second, I created a 'games' file which would house the methods used to actually scrape the external data and present the data in ruby-friendly objects that could me called upon as I needed. Since I was using Repl.it, it was convenient(if not the only conceivable way) to actually run my program through their main file. Thus, my actual program files are simply funneled into the main file, which is what is actually used to execute the program.

The second major hurdle came with installing the required gem files, as well as creating pathways to allow each file to recognize one another. I'm still a little in the dark as to why I ran into some of the obstacles I did. For instance: I could require my main file to read in my user-interface file and my data source file and that would work. However, if I tried to read my data source file into my user-interface file, my data source file couldn't be seen. Since Repl.it handles gem installation different for Ruby, requiring packages, I was left scratching my head trying to get my program to read them properly. No matter the load order, my gem files could only be recognized directly through the page in which they were utilized(i.e. if I used Nokogiri in my data source file, I needed to require Nokogiri within that file. requiring in through the main execution file would not work.) Through trial and error, I finally figured out a formula (albeit unwittingly) that allowed my program to run as intended.

A third hurdle was actually scraping the data. Accessing the webpages themselves proved simple once I was able to successfully call in the required gems. However, the webpages program formatting forced more of a 'brute force' technique to scrape the data I required. Thankfully, while their formatting made skimming only the relevant data difficult, each webpage was formatted the same way, which allowed for quicker programming.

All in all, I am proud of my work, though I know there is a lot that could be done to improve it. It bears mentioning that this app, as it is now, serves more as a barebones template than a comprehensive list. This app serves to demonstrate the required functions rather than provide a fully fleshed out database. 
